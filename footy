#!/bin/bash

# == SET VARIABLES ==
API=https://api.football-data.org/v4
FOOTY=$(basename "$0")
USAGE="$FOOTY [-c <COMPETITION> | -t <TEAM> | -s | -m <DAYS+/-> | -I | -i <COMPETITION> | -r | -k <API-KEY> | -h]"

# == FUNCTIONS FOR OPTIONS ==
options() {
	cat <<-EOF
	Usage: $FOOTY OPTIONS
	OPTIONS:
	  -s                Prints standings/table
	                    Must be used with -c <COMPETITION>
	  -m <DAYS+/->      Prints upcoming ('+' suffix) or previous ('-' suffix) matches
	                    Must be used with either -c <COMPETITION> or -t <TEAM>
	  -c <COMPETITION>  Specifies competition (use code or id)
	  -t <TEAM>         Specifies team (must use team's id)
	  -I                Prints all supported competitions
	  -i <COMPETITION>  Prints all teams in competition (use code or id)
	  -r                Unformatted output for piping to other tools
	  -k <API-KEY>      Saves the api-key to $HOME/.config/footy/api-key.txt
	  -h                Prints this help message
	EOF
	exit 0
}

error() {
	echo "Error: $1" 1>&2
	exit 1
}

usage() {
	error "$(
		cat <<-END
		$1
		Usage: $USAGE
		Try '$FOOTY -h' for more information
		END
	)"
}

date_diff() {
	# try GNU coreutils, then macOS date command
	date -d "$2${DAYS} days" +"%Y-%m-%d" 2> /dev/null \
		|| date -v "$2${DAYS}d" +"%Y-%m-%d" 2> /dev/null \
		|| error "This system uses an invalid date command."
}

api_call() {
	JSON="$(curl -sH "$API_KEY" "$API/$1")"
	ERROR="$(echo "$JSON" | jq -r 'if .message != null then .message else "false" end')"
	if [ "$ERROR" != "false" ]; then
		error "$ERROR"
		exit 1
	fi
}

set_key() {
	mkdir -p "$HOME/.config/footy"
	echo "${OPTARG}" > "$HOME/.config/footy/api-key.txt"
	exit 0
}

competitions() {
	api_call "competitions"
	OUT=$(echo "$JSON" \
		| jq -r '.competitions[] | "\(.area.name),\(.name),\(.code),\(.id),\(.plan)"' \
		| awk '{ $3 = ($3 == "null" ? "" : $3); $6 = ($5 == "TIER_ONE" ? "Free" : "") } 1' FS="," OFS="," \
		| cat <(echo "Area,Name,Code,Id,Plan,Price") - \
		| cut -d ',' -f 1-4,6)
}

# return LEAGUE or CUP
competition_type() {
	echo "$JSON" | jq -r '.competition.type'
}

teams() {
	api_call "competitions/$INFO_TEAMS/teams"
	OUT=$(echo "$JSON" \
		| jq -r '.teams[] | "\(.name),\(.id)"' \
		| cat <(echo "Name,Id") -)
}

standings() {
	api_call "competitions/$COMPETITION/standings"
	case "$(competition_type)" in
		LEAGUE)
			OUT=$(echo "$JSON" \
				| jq -r '.standings[0].table[] | "\(.position),\(.team.name),\(.playedGames),\(.won),\(.draw),\(.lost),\(.goalsFor),\(.goalsAgainst),\(.goalDifference),\(.points)"' \
				| cat <(echo "Pos,Team,P,W,D,L,GF,GA,GD,Pts") -)
			;;
		CUP)
			;;
	esac
}

matches_competition() {
	api_call "competitions/$COMPETITION/matches?dateFrom=$DATE_FROM&dateTo=$DATE_TO&status=$STATUS"
	case "$(competition_type)" in
		LEAGUE)
			OUT=$(echo "$JSON" \
				| jq -r '.matches[] | "\(.utcDate),\(.homeTeam.name),\(.awayTeam.name),\(.score.fullTime.home):\(.score.fullTime.away)"' \
				| awk '{ $4 = ($4 == "null:null" ? "-:-" : $4) } 1' FS="," OFS="," \
				| cat <(echo "Date,Home,Away,Score") -)
			;;
		CUP)
			;;
	esac
}

matches_team() {
	api_call "teams/$TEAM/matches?dateFrom=$DATE_FROM&dateTo=$DATE_TO&status=$STATUS"
	case "$(competition_type)" in
		LEAGUE)
			OUT=$(echo "$JSON" \
				| jq -r '.matches[] | "\(.utcDate),\(.homeTeam.name),\(.awayTeam.name),\(.score.fullTime.home):\(.score.fullTime.away)"' \
				| awk '{ $4 = ($4 == "null:null" ? "-:-" : $4) } 1' FS="," OFS="," \
				| cat <(echo "Date,Home,Away,Score") -)
			;;
		CUP)
			;;
	esac
}

# == PROCESS OPTIONS ==
STANDINGS=false
INFO_COMPETITIONS=false
RAW=false
NOP=false
while getopts ":hk:sm:c:t:rIi:" opt; do
	case "${opt}" in
		h)
			options;;
		k)
			set_key;;
		s)
			STANDINGS=true;;
		m)
			MATCHES_DAYS=${OPTARG};;
		c)
			COMPETITION=${OPTARG};;
		t)
			TEAM=${OPTARG};;
		r)
			RAW=true;;
		I)
			INFO_COMPETITIONS=true;;
		i)
			INFO_TEAMS=${OPTARG};;
		*)
			usage "Unknown or incomplete option";;
	esac
done

# == CALL FUNCTIONS ==
API_KEY="X-Auth-Token: $(cat "$HOME"/.config/footy/api-key.txt)"

if $INFO_COMPETITIONS; then
	competitions
elif [ -n "$INFO_TEAMS" ]; then
	teams
elif $STANDINGS; then
	if [ -z "$COMPETITION" ]; then
		usage "To use the -s option, you must also use -c to specify a competition"
	else
		standings
	fi
elif [ -n "$MATCHES_DAYS" ]; then
	TODAY=$(date +"%Y-%m-%d")
	DAYS=$(echo "${MATCHES_DAYS%?}")
	SIGN=$(echo "${MATCHES_DAYS: -1}")
	case "$SIGN" in
		-)
			# DATE_FROM=$(date -d "-$DAYS days" +"%Y-%m-%d" 2> /dev/null) || error "This system uses an invalid date command."
			DATE_FROM=$(date_diff "$DAYS" "$SIGN") || exit 1
			DATE_TO=$TODAY
			STATUS=FINISHED
			;;
		+)
			DATE_FROM=$TODAY
			# DATE_TO=$(date -d "+$DAYS days" +"%Y-%m-%d" 2> /dev/null) || error "This system uses an invalid date command."
			DATE_TO=$(date_diff "$DAYS" "$SIGN") || exit 1
			STATUS=SCHEDULED
			;;
		*)
			usage "Invalid days format"
			;;
	esac

	if [[ -n "$COMPETITION" && -n "$TEAM" || -z "$COMPETITION" && -z "$TEAM" ]]; then
		usage "To use the -m option, you must also use -c or -t to specify a competition or team"
	else
		if [ -n "$COMPETITION" ]; then
			matches_competition
		elif [ -n "$TEAM" ]; then
			matches_team
		fi
		$RAW || OUT=$(echo "$OUT" | awk '{ if (NR!=1) { "date -d "$1" +\"%d %b %H:%M\" | tr -d \"\n\"" | getline date; $1 = date } } 1' FS="," OFS=",")
	fi
else
	NOP=true
fi

$NOP && usage "Invalid options" || 
	$RAW && echo "$OUT" || echo "$OUT" | column -ts ','
