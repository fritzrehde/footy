#!/bin/bash

# == SET VARIABLES ==
API=https://api.football-data.org/v2
FOOTY=$(basename "$0")
USAGE="$FOOTY [-l <LEAGUE> | -t <TEAM> | -s | -m <DAYS+/-> | -I | -i <LEAGUE> | -r | -k <API-KEY> | -h]"

# == FUNCTIONS FOR OPTIONS ==
options()
{
	cat <<-EOF
	Usage: $FOOTY OPTIONS
	OPTIONS:
	  -s            Prints standings/table
	                Must be used with -l <LEAGUE>
	  -m <DAYS+/->  Prints upcoming ('+' suffix) or previous ('-' suffix) matches
	                Must be used with either -l <LEAGUE> or -t <TEAM>
	  -l <LEAGUE>   Specifies league (use league's code or id)
	  -t <TEAM>     Specifies team (must use team's id)
	  -I            Prints all supported leagues
	  -i <LEAGUE>   Prints all teams in league (use league's code or id)
	  -r            Unformatted output for piping to other tools
	  -k <API-KEY>  Saves the api-key to $HOME/.config/footy/api-key.txt
	  -h            Prints this help message
	EOF
	exit 0
}

error()
{
	1>&2 echo "Error: $1"
	exit 1
}

usage()
{
	error "$(
		cat <<-END
		$1
		Usage: $USAGE
		Try '$FOOTY -h' for more information
		END
	)"
}

api_call()
{
	JSON=$(curl -sH "$API_KEY" "$API"/"$1")
	ERROR=$(echo "$JSON" | jq -r 'if .message != null then .message else "false" end')
	if [ "$ERROR" != "false" ]; then
		error "$ERROR"
	fi
}

set_key()
{
	mkdir -p "$HOME"/.config/footy
	echo "${OPTARG}" > "$HOME"/.config/footy/api-key.txt
	exit 0
}

leagues()
{
	api_call competitions
	[ $? -eq 1 ] && exit 1
	OUT=$(echo "$JSON" | \
		jq -r '.competitions[] | "\(.area.name),\(.name),\(.code),\(.id),\(.plan)"' | \
		awk '{ $3 = ($3 == "null" ? "" : $3); $6 = ($5 == "TIER_ONE" ? "Free" : "") } 1' FS="," OFS="," | \
		cat <(echo "Area,Name,Code,Id,Plan,Price") - | \
		cut -d ',' -f 1-4,6)
}

teams()
{
	api_call competitions/"$INFO_TEAMS"/teams
	[ $? -eq 1 ] && exit 1
	OUT=$(echo "$JSON" | \
		jq -r '.teams[] | "\(.name),\(.id)"' | \
		cat <(echo "Name,Id") -)
}

standings()
{
	api_call competitions/"$LEAGUE"/standings
	[ $? -eq 1 ] && exit 1
	OUT=$(echo "$JSON" | \
		jq -r '.standings[].table[] | "\(.position),\(.team.name),\(.playedGames),\(.won),\(.draw),\(.lost),\(.goalsFor),\(.goalsAgainst),\(.goalDifference),\(.points)"' | \
		cat <(echo "Pos,Team,P,W,D,L,GF,GA,GD,Pts") -)
}

matches_league()
{
	api_call competitions/"$LEAGUE"/matches\?dateFrom="$DATE_FROM"\&dateTo="$DATE_TO"\&status="$STATUS"
	[ $? -eq 1 ] && exit 1
	OUT=$(echo "$JSON" | \
		jq -r '.matches[] | "\(.utcDate),\(.homeTeam.name),\(.awayTeam.name),\(.score.fullTime.homeTeam):\(.score.fullTime.awayTeam)"' | \
		awk '{ $4 = ($4 == "null:null" ? "-:-" : $4) } 1' FS="," OFS="," | \
		cat <(echo "Date,Home,Away,Score") -)
}

matches_team()
{
	api_call teams/"$TEAM"/matches\?dateFrom="$DATE_FROM"\&dateTo="$DATE_TO"\&status="$STATUS"
	[ $? -eq 1 ] && exit 1
	OUT=$(echo "$JSON" | \
		jq -r '.matches[] | "\(.utcDate),\(.homeTeam.name),\(.awayTeam.name),\(.score.fullTime.homeTeam):\(.score.fullTime.awayTeam)"' | \
		awk '{ $4 = ($4 == "null:null" ? "-:-" : $4) } 1' FS="," OFS="," | \
		cat <(echo "Date,Home,Away,Score") -)
}

# == PROCESS OPTIONS ==
STANDINGS=false
INFO_LEAGUES=false
RAW=false
NOP=false
while getopts ":hk:sm:l:t:rIi:" opt; do
	case "${opt}" in
		h)
			options;;
		k)
			set_key;;
		s)
			STANDINGS=true;;
		m)
			MATCHES_DAYS=${OPTARG};;
		l)
			LEAGUE=${OPTARG};;
		t)
			TEAM=${OPTARG};;
		r)
			RAW=true;;
		I)
			INFO_LEAGUES=true;;
		i)
			INFO_TEAMS=${OPTARG};;
		*)
			usage "Unknown or incomplete option";;
	esac
done

# == CALL FUNCTIONS ==
API_KEY="X-Auth-Token: $(cat "$HOME"/.config/footy/api-key.txt)"

if $INFO_LEAGUES; then
	leagues
elif [ -n "$INFO_TEAMS" ]; then
	teams
elif $STANDINGS; then
	if [ -z "$LEAGUE" ]; then
		usage "To use the -s option, you must also use -l to specify a league"
	else
		standings
	fi
elif [ -n "$MATCHES_DAYS" ]; then
	TODAY=$(date +"%Y-%m-%d")
	DAYS=$(echo "${MATCHES_DAYS%?}")
	case "$(echo "${MATCHES_DAYS: -1}")" in
		-)
			DATE_FROM=$(date -d "-$DAYS days" +"%Y-%m-%d" || error "This system uses an invalid date command.")
			DATE_TO=$TODAY
			STATUS=FINISHED
			;;
		+)
			DATE_FROM=$TODAY
			DATE_TO=$(date -d "+$DAYS days" +"%Y-%m-%d" || error "This system uses an invalid date command.")
			STATUS=SCHEDULED
			;;
		*)
			usage "Invalid days format"
			;;
	esac

	if [[ -n "$LEAGUE" && -n "$TEAM" || -z "$LEAGUE" && -z "$TEAM" ]]; then
		usage "To use the -m option, you must also use -l or -t to specify a league or team"
	else
		if [ -n "$LEAGUE" ]; then
			matches_league
		elif [ -n "$TEAM" ]; then
			matches_team
		fi
		$RAW || OUT=$(echo "$OUT" | awk '{ if (NR!=1) { "date -d "$1" +\"%d %b %H:%M\" | tr -d \"\n\"" | getline date; $1 = date } } 1' FS="," OFS=",")
	fi
else
	NOP=true
fi

$NOP && usage "Invalid options" || 
	$RAW && echo "$OUT" || echo "$OUT" | column -ts ','
